from pyimagesearch.colordescriptor import ColorDescriptor
from tempfile import NamedTemporaryFile
import shutil
import glob
import cv2
import time
import datetime
import sys
import csv
import codecs
import pathlib
import urlparse
import urllib
from math import ceil
import os

USERS = {}
USER_NAMES = []
list_error = {}
ALLOWED_EXTENSIONS = set(['png', 'jpg', 'jpeg', 'bmp'])
reset_msg = None

class wood_info:
  def __init__(self,name,material,productType,category,size,origin,wood_id):
    self.name = name
    self.material = material
    self.productType = productType
    self.category = category
    self.size = size
    self.origin = origin
    self.wood_id = wood_id

#############
# Insert detail information of wood into csv file
#############
def add_img_info_csv(output_path, path_image, wood_info):
    # initialize the color descriptor
    cd = ColorDescriptor((8, 12, 3))
    # open the output index file for writing
    output = codecs.open(output_path, "a",encoding="utf-8")
    # use glob to grab the image paths and loop over them
    for imagePath in glob.glob(path_image):       
	    # extract the image ID (i.e.  the unique filename) from the image, path
	    # and load the image itself
	    imageID = imagePath[imagePath.rfind("/") + 1:]
	    image = cv2.imread(imagePath)
	    # describe the image
	    features = cd.describe(image)

	    # write the features to file
	    features = [str(f) for f in features]        
	    output.write(u"%s,%s,%s,%s,%s,%s,%s,%s\n" % (imageID, wood_info.name,wood_info.material,wood_info.productType,wood_info.category,wood_info.size,wood_info.origin, ",".join(features)))

    # close the index file
    output.close()

#############
# Update detail information of wood into csv file
#############
def update_img_info_csv(output_path, path_image, wood_info):
    if path_image == None:
        print("update_img_info_csv path_image == None")
        tempfile = NamedTemporaryFile(mode='wb', delete=False)
        with open(output_path, 'r') as csvfile, tempfile:
            #reader = csv.DictReader(csvfile, fieldnames=fields)
            #writer = csv.DictWriter(tempfile, fieldnames=fields)
            reader = csv.reader(csvfile, delimiter=',', quotechar='"')
            writer = csv.writer(tempfile, delimiter=',', quotechar='"')
            for row in reader:
                if row[0] != None:            
                    if row[0] == str(wood_info.wood_id):  
                        print('row updated------------------------------------------------------')                               
                        row[1] = wood_info.name
                        row[2] = wood_info.material
                        row[3] = wood_info.productType
                        row[4] = wood_info.category
                        row[5] = wood_info.size
                        row[6] = wood_info.origin
                    print('insert row--------------------')  
                    writer.writerow(row)
        shutil.move(tempfile.name, output_path)

#############
# Update password CSV
#############
def change_password_csv(output_path, user):
    print("---------------------------- change_password_csv")
    print user.password
    print user.id
    print user.user_name
    print output_path
    tempfile = NamedTemporaryFile(mode='wb', delete=False)
    with open(output_path, 'r') as csvfile, tempfile:
        reader = csv.reader(csvfile, delimiter=',', quotechar='"')
        writer = csv.writer(tempfile, delimiter=',', quotechar='"')
        for row in reader:
            if row[0] != None:     
                print row[0] 
                if row[0] == str(user.id) and row[1] == str(user.user_name):  
                    row[2] = user.password 
                writer.writerow(row)
    shutil.move(tempfile.name, output_path)

#############
# Delete record in csv file
#############
def delete_row_csv(file_name, input_csv):
    data = None
    with open(input_csv, "rb") as f:
        data = list(csv.reader(f))
    with open(input_csv, "wb") as f:
        writer = csv.writer(f)
        for row in data:
            if row[0] != file_name:
                writer.writerow(row)    

#############
# Convert to url
#############
def path2url(path):
    return urlparse.urljoin('file:', urllib.pathname2url(path))

from math import ceil


class Pagination(object):

    def __init__(self, page, per_page, total_count):
        self.page = page
        self.per_page = per_page
        self.total_count = total_count

    @property
    def pages(self):
        return int(ceil(self.total_count / float(self.per_page)))

    @property
    def has_prev(self):
        return self.page > 1

    @property
    def has_next(self):
        return self.page < self.pages

    def iter_pages(self, left_edge=2, left_current=2,
                   right_current=5, right_edge=2):
        last = 0
        for num in xrange(1, self.pages + 1):
            if num <= left_edge or \
               (num > self.page - left_current - 1 and \
                num < self.page + right_current) or \
               num > self.pages - right_edge:
                if last + 1 != num:
                    yield None
                yield num
                last = num

############################################################################# S3Corp
############################################################################# Duy
############################################################################# End
#############
# Check input file is valid or not
#############
def allowed_file(filename):
    return '.' in filename and \
        filename.rsplit('.', 1)[1].lower() in ALLOWED_EXTENSIONS

#############
# Generate valid name of image file
#############
def gen_file_name(filename, path):
    """
    If file was exist already, rename it and return a new name
    """

    i = 1
    while os.path.exists(os.path.join(path, filename)):
        name, extension = os.path.splitext(filename)
        filename = '%s_%s%s' % (name, str(i), extension)
        i += 1

    return filename